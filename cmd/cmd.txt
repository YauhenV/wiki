Основы командной строки


Установка WSL
Теперь вы можете установить все необходимое для запуска подсистемы Windows для Linux (WSL).
Ссылка: https://docs.microsoft.com/ru-ru/windows/wsl/install


Командная строка.
Для работы с командной строкой понадобятся две вещи:
1. Терминал.
2. Командный интерпретатор.
*
Терминал 
Терминалом называют программу, которая эмулирует поведение "железного" терминала, состоящего из клавиатуры и монитора
*
Командный интерпретатор
У этого понятия множество синонимов, среди них shell ("шелл"), командная оболочка и командный процессор. Командная оболочка — программа, через которую пользователь (или администратор) управляет операционной системой и установленными программами, используя командную строку. 
*
Символ $ используется как разделитель. Слева от него — настраиваемое сообщение для вывода, обычно текущая директория, а справа — то, что вводится пользователем.
*
# комментарии
*
Командные оболочки, как и терминалы, бывают разные, хотя по умолчанию в большинстве операционных систем стоит Bash.
Командная оболочка и терминал — не одно и то же. Терминал — это программа, которая запускает командную оболочку внутри себя.
*
Командную оболочку нередко называют реплом (REPL, Read-Eval-Print-Loop), что отражается в способе взаимодействия с пользователем:

    Read — шелл ждёт ввода команды от пользователя
    Eval — шелл исполняет введённую команду
    Print — шелл выводит результат
    Loop — возвращаемся к первому пункту
Этот процесс называется интерактивной сессией: после загрузки шелл ждёт ввода команды, затем он её исполняет, выводит результат и снова ждёт ввода команды. Так происходит до тех пор, пока не будет дана команда на выход из терминала или выключение компьютера. REPL — широко распространённый способ взаимодействия с пользователем. В следующих курсах вы увидите, что он есть и у баз данных, и у языков программирования.


Навигация
Можно сказать, что мы всегда находимся внутри какой-то директории, которую называют "рабочей", working directory. Проверяется текущая директория командой pwd.
*
 Возможно, вы знаете, что путь до файла может быть либо абсолютный, либо относительный. Абсолютный путь — это полный путь начиная от корня, в нашем случае /, а относительный — это путь, начинающийся от нашей текущей рабочей директории. Выше мы указали относительный путь. Отличить их друг от друга очень легко: если первым символом в пути идёт /, то это абсолютный путь, иначе — относительный.
Команда cd понимает и абсолютные и относительные пути.
*
Для перехода на директорию уровнем выше необходимо указать специальное значение .., и произойдёт переход на директорию уровнем выше. (cd .. или cd ../..).
Команда cd, выполненная без аргументов, перебрасывает в домашнюю директорию текущего пользователя.
Домашняя директория пользователя имеет специальное обозначение — ~ (тильда), которое в момент выполнения команды заменяется на абсолютный путь.


Интерфейс командной строки
Если в GUI (Graphical User Interface — графический интерфейс) можно взять любую незнакомую программу, запустить её, почитать названия пунктов меню, потыкать на разные кнопки и получить какой-нибудь результат, то в CLI (Command Line Interface — интерфейс командной строки) у вас нет ничего кроме названия программы и как ей пользоваться — непонятно.
*
Но что, если мы захотим посмотреть скрытые файлы и директории (в *nix-системах они начинаются с символа "точка", например .profile)? Тогда необходимо набрать ls -a
*
У команд бывают аргументы и опции (их также называют флагами). Например, в команде ls Music, Music — это аргумент, а вот в команде ls -a, -a — это опция.
   Опции всегда начинаются с одного или двух дефисов
Для просмотра полного содержимого директории Music с информацией о каждом файле достаточно набрать ls -la Music.
*
Опции указываются слева от аргументов, но иногда бывают ситуации, что они используются справа, такое чаще встречается в сложных утилитах со вложенными командами.
*
Достаточно набрать man <имя команды> — и мы попадём в режим чтения документации. В мануале содержится много полезной информации, например, описание утилиты в целом, формат её вызова, все возможные опции и даже примеры вызовов.
	Ещё полезен сайт https://explainshell.com/, в который достаточно вбить любую команду, и он покажет удобное интерактивное описание.
*
Большинство утилит имеет две версии одной и той же опции: одна из них длинная, другая — короткая. Например -v и --version в PHP.
*
$ say -o hi.aac 'Hello, World.'

Значение опции указывается через пробел от самой опции. Если значение опции содержит в себе специальные или пробельные символы, то его нужно оборачивать в кавычки, двойные или одинарные - не важно.

$ say -o 'hi.aac' 'Hello, World.'

Некоторые программы допускают использование знака = вместо пробела.

# Команда say такое не позволяет, но зато видно принцип
$ say -o=hi.aac 'Hello, World.'
*
Подобное описание есть практически у любой утилиты. Описания построены по одному и тому же принципу. Квадратные скобки [] обозначают необязательность. Например, опция -v необязательна, то же самое касается и любых других опций этой программы. Вертикальная черта | обозначает операцию "или", причём именно исключающее или. Посмотрите на последний блок [-f file | string ...]. Он означает, что say может либо произносить текст из файла, либо произносить строчку, переданную как аргумент, но не то и другое одновременно. Бывают и другие вариации описания способов вызова: значение по умолчанию, выбор из конкретных элементов, отрицание.
*