CSS - это язык стилей, определяющий отображение HTML (и других) документов.
CSS работает со шрифтами, цветом, полями, строками, высотой, шириной, фоновыми изображениями, позиционированием элементов и многими другими вещами.
Год появления - 1994г.

Анатомия CSS
cтруктура CSS
селектор,
селектор,
селектор {
    правило
}
-
селектор { /*блок объявления стилей */    - комментарий
    свойство: значение;
    свойство: значение;
    свойство: значение;
}
-
Селектор тега
div { color: red }
-d
Cелектор класса
<div class="heading red">Красный заголовок</div>

div.heading {
    font-size: 50px;
}
div.red {
    color: red;
}
-
Селектор идентификатора
<div id="red">Красный заголовок</div>
div#red {
    color: red;
}
-
id vs class
class - для визуального стиля
id - для логических или для функциональных элементов (связка for-id у label-input)
-
Универсальный селектор
* {
    color: red;
}
-
Комбинирование селекторов
div .big { color: red; }
p .div .big { color: red; }
-
Селектор атрибутов
[href] { color:red; }
[href ="http://ya.ru"] {color: red;} - по значению атрибута
[href^ ="http://"] {color: red;} - по содержанию определенного атрибута


Псевдоэлементы и псевдоклассы.
Динамические псевдоклассы
a:link {color: blue;}
a:active {color: red;}
a: hover {color: green;}
a: visited {color: purple;}
a: focus {color: yellow;}
:enabled
:disabled
:checked
:indeterminate
:read-only
:valid
-
input.example {padding: 5px;}
.example:enabled {background: red;}
.example:disabled {background: yellow;}
.example:valid {background: green;}


Структурные псевдоклассы
		
:first-child/last-child
:nth-child/nth-last-child(2n+1)
:nth-of-type/nth-last-of-type(-n+4)
:only-child/only-of-type
:empty
first-child - первый элемент на каждом уровне (html,ul,li)
last-child - последний элемент на каждом уровне
only-child - те элементу у которых только один ребенок
nth-child(2n) - каждый чётного ребенок
div:nth-of-type(2n) - каждый чётног ребенок заданного типа div


Псевдоэлементы
::first-letter {color: red} - выделить первую букву
::first-line {color: blue} - первую линию текста
-
<div>::beforeМного разного текста::after</div>
::before,
::after {
    color: red;
    font-weight: bold;
    content: "»"
}
::before {content: "«"}


Отношения (Combinator)
div div - потомок
div >> div - потомок /* CSS Selection Level 4*/
div > div - сын
div + div - брат
div ~ div - братья
-
li li:nth-child(2n)
li:first-child + li
li:not(:first-child)

Специфичность
div {
    color:red;
}
div {
    color:blue;
}
ИТОГ: текст в div синий
-
html div {
    color:red;
}
div {
    color:blue;
}
ИТОГ: текст в div красный
-
Считаем специфичность:
- Количество селекторов по идентификатору (=a)
- Количество селекторов по классу, псевдоклассов (:not не учитывается) или атрибуту (=b)
- Количество селекторов элементов (тегов) или псевдоэлементов (=c)
- Универсальный селектор, селекторы потомков, детей и прочие не влияют на специфичность.
a b c
где:
a - идентификатор (id)					0
b - класс, псевдокласс, атрибут (class)			2
c - элемент, псевдоэлемент (например div, span)		1
-
Применяемы высчитанные значения:
1. Находим каждому HTML элементу соответствующие ему селекторы
2. Сортируем селекторы исходя их специфичности (от менее приоритетных к более приоритетным)
3. Применяем правило последовательно.
-
Инлайн и !important
Инлайн - указать CSS непосредственно в самом документе html (style)
!important - повышает приоритет для конкретного правила
<div style="color: blue"></div>

div {
    color:green !important
}

<div style="color: white !importatn"></div>
-
1. Инлайн стили по умолчанию приоритетнее стилей в CSS.
2. Стили в CSS с !important приоритетнее инлайн стилей.
3. Инлайн стили с !important приоритетнее всего.


Наследование.
1. Некоторые стили применяются не только к целевому элементу, но и к его потомкам.
2. Унаследованные стили не имеют спецефичности, то есть их всегда перебирает любой селектор.
3. Именно поэтому не рекомендуют пользоваться селектором * , так как его специфичность будет "0 0 0".


Порядок.
Каскад - это:
1. Стили браузера.
2. Стили пользователя и/или плагинов браузера.
3. Стили страницы.
4. Стили страницы с !important.
5. Стили пользователя и/или плагинов браузера с !important.


Числовые значения.
1. Целые числа.
2. Дробные числа.
3. Процентные значения.
Абсолютные единицы удобны при определении CSS при печати. В вебе же практически не используются.
-
Относительные единицы измирения длины.
1. Пиклесы (px)
2. em - зависит от размера шрифта (em)
3. rex - зависит от размера шрифта корневого элемента (rem)
4. ex - зависит от высоты символа x в данном шрифте
5. ch - зависит от ширины символа O в данном шрифте
6. vh/vw - 1/100 высоты и ширины vieport'a соответственно
7. vmax- 1/100 от максимума между высотой и шириной vieport'a
8. vmin- 1/100 от минимума между высотой и шириной vieport'a
-
Цвета.
Способы задания красного цвета:
1. Именованные цвета - red
2. Функциональный - rgb(255,0,0) или rgba(255,0,0,1) (последний аргумент это прозрачность)
3. Шестнадцатиричный - #ff0000 или #f00
-
Ещё типы значений
- Именованные слова: bold, underline
- Комбинации: 1px solid red
- Функциональные: url(), attr(), rgb()
-
Вставка CSS в HTML документ
<div style="color:red"></div> вставка в код HTML

<style>div { color: red }</style>

<style>@import (<url to css>)</style> в другой файл

<link rel="stylesheet" href="<url to css>"> - файл с правилами CSS (самый правильный вариант)