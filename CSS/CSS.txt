CSS - это язык стилей, определяющий отображение HTML (и других) документов.
CSS работает со шрифтами, цветом, полями, строками, высотой, шириной, фоновыми изображениями, позиционированием элементов и многими другими вещами.
Год появления - 1994г.

Анатомия CSS
cтруктура CSS
селектор,
селектор,
селектор {
    правило
}
-
селектор { /*блок объявления стилей */    - комментарий
    свойство: значение;
    свойство: значение;
    свойство: значение;
}
-
Селектор тега
div { color: red }
-d
Cелектор класса
<div class="heading red">Красный заголовок</div>

div.heading {
    font-size: 50px;
}
div.red {
    color: red;
}
-
Селектор идентификатора
<div id="red">Красный заголовок</div>
div#red {
    color: red;
}
-
id vs class
class - для визуального стиля
id - для логических или для функциональных элементов (связка for-id у label-input)
-
Универсальный селектор
* {
    color: red;
}
-
Комбинирование селекторов
div .big { color: red; }
p .div .big { color: red; }
-
Селектор атрибутов
[href] { color:red; }
[href ="http://ya.ru"] {color: red;} - по значению атрибута
[href^ ="http://"] {color: red;} - по содержанию определенного атрибута


Псевдоэлементы и псевдоклассы.
Динамические псевдоклассы
a:link {color: blue;}
a:active {color: red;}
a: hover {color: green;}
a: visited {color: purple;}
a: focus {color: yellow;}
:enabled
:disabled
:checked
:indeterminate
:read-only
:valid
-
input.example {padding: 5px;}
.example:enabled {background: red;}
.example:disabled {background: yellow;}
.example:valid {background: green;}


Структурные псевдоклассы
		
:first-child/last-child
:nth-child/nth-last-child(2n+1)
:nth-of-type/nth-last-of-type(-n+4)
:only-child/only-of-type
:empty
first-child - первый элемент на каждом уровне (html,ul,li)
last-child - последний элемент на каждом уровне
only-child - те элементу у которых только один ребенок
nth-child(2n) - каждый чётного ребенок
div:nth-of-type(2n) - каждый чётног ребенок заданного типа div


Псевдоэлементы
::first-letter {color: red} - выделить первую букву
::first-line {color: blue} - первую линию текста
-
<div>::beforeМного разного текста::after</div>
::before,
::after {
    color: red;
    font-weight: bold;
    content: "»"
}
::before {content: "«"}


Отношения (Combinator)
div div - потомок
div >> div - потомок /* CSS Selection Level 4*/
div > div - сын
div + div - брат
div ~ div - братья
-
li li:nth-child(2n)
li:first-child + li
li:not(:first-child)

Специфичность
div {
    color:red;
}
div {
    color:blue;
}
ИТОГ: текст в div синий
-
html div {
    color:red;
}
div {
    color:blue;
}
ИТОГ: текст в div красный
-
Считаем специфичность:
- Количество селекторов по идентификатору (=a)
- Количество селекторов по классу, псевдоклассов (:not не учитывается) или атрибуту (=b)
- Количество селекторов элементов (тегов) или псевдоэлементов (=c)
- Универсальный селектор, селекторы потомков, детей и прочие не влияют на специфичность.
a b c
где:
a - идентификатор (id)					0
b - класс, псевдокласс, атрибут (class)			2
c - элемент, псевдоэлемент (например div, span)		1
-
Применяемы высчитанные значения:
1. Находим каждому HTML элементу соответствующие ему селекторы
2. Сортируем селекторы исходя их специфичности (от менее приоритетных к более приоритетным)
3. Применяем правило последовательно.
-
Инлайн и !important
Инлайн - указать CSS непосредственно в самом документе html (style)
!important - повышает приоритет для конкретного правила
<div style="color: blue"></div>

div {
    color:green !important
}

<div style="color: white !importatn"></div>
-
1. Инлайн стили по умолчанию приоритетнее стилей в CSS.
2. Стили в CSS с !important приоритетнее инлайн стилей.
3. Инлайн стили с !important приоритетнее всего.


Наследование.
1. Некоторые стили применяются не только к целевому элементу, но и к его потомкам.
2. Унаследованные стили не имеют спецефичности, то есть их всегда перебирает любой селектор.
3. Именно поэтому не рекомендуют пользоваться селектором * , так как его специфичность будет "0 0 0".


Порядок.
Каскад - это:
1. Стили браузера.
2. Стили пользователя и/или плагинов браузера.
3. Стили страницы.
4. Стили страницы с !important.
5. Стили пользователя и/или плагинов браузера с !important.


Числовые значения.
1. Целые числа.
2. Дробные числа.
3. Процентные значения.
Абсолютные единицы удобны при определении CSS при печати. В вебе же практически не используются.
-
Относительные единицы измирения длины.
1. Пиклесы (px)
2. em - зависит от размера шрифта (em)
3. rex - зависит от размера шрифта корневого элемента (rem)
4. ex - зависит от высоты символа x в данном шрифте
5. ch - зависит от ширины символа O в данном шрифте
6. vh/vw - 1/100 высоты и ширины vieport'a соответственно
7. vmax- 1/100 от максимума между высотой и шириной vieport'a
8. vmin- 1/100 от минимума между высотой и шириной vieport'a
-
Цвета.
Способы задания красного цвета:
1. Именованные цвета - red
2. Функциональный - rgb(255,0,0) или rgba(255,0,0,1) (последний аргумент это прозрачность)
3. Шестнадцатиричный - #ff0000 или #f00
-
Ещё типы значений
- Именованные слова: bold, underline
- Комбинации: 1px solid red
- Функциональные: url(), attr(), rgb()
-
Вставка CSS в HTML документ
<div style="color:red"></div> вставка в код HTML

<style>div { color: red }</style>

<style>@import (<url to css>)</style> в другой файл

<link rel="stylesheet" href="<url to css>"> - файл с правилами CSS (самый правильный вариант)


Шрифты и текст
Растовые шрифты и Векторные шрифты.
Растовая шрифты (старые, пиксельные)
Векторные шритфты (современные, математические)
-
Анатомия шрифта 
- Базовая линия (baseline)
- Высота прописных знаков (cap height)
- Высота строчных знаков (x-height)
- Интерлиньяж, межстрочный интервал (leading)
- Кегельная площадка (em square)


Размер шрифта
- Гарнитура
-
Ключевые слова бывают:
Абсолютные (xx-small, large)
Относительные (smaller, large)
Единицы измирения длины (px, em, %, rem)
-
Высота строки - устанавливается двумя типами значения: единицами измирения длины или множителем.
.line-height-mult {line-height: 1,5;}  - самый предпочтительные вариант
.line-height-em {line-height: 1,5em;} 
.line-height-pixel {line-height: 30 px;} 
Расстояние между буквами
.zero{letter-spacing: normal;}
Расстояние между словами
.first {word-spacing: -18px;}


Начертание шрифтов
Наклон, Насыщенность, Плотность
-
Капитель-начертание, где строчные знаки выглядят как уменьшенные прописные.
.h3 {font-variant: normal}
.h3 {font-variant: nsmall-caps}
Наклоном можно управлять при помощи тега font-style
font-style: normal;
	:oblique;
	:italic;
Насыщенность
font-weight: normal;
	:bold;
	:light;
	:100-:900
Плотность
font-stretch: ultra-condensed;
	:extra-condensed;
	noraml;
	....
Плотность не работает в Safari и совсем недавно появилась в Хроме раньше было так:
.block {
	font-family: 'My Font Condensed'
}
ИЛИ
.block {
	font-family: 'My Font Expanded'
}


Семейства шрифтов
Шрифты в OC - существует ряд шрифтов, которые есть почти в каждой OC, таким образом их использование считается наиболее безопасным.
Без засечек - Arial
С засечками - Times New Roman
Моноширинные - Courier New
body {
	font-family: 'Arial';
}
body {
	font-family: Arial, Helvetica, Calibri;
}
-
Классификация шрифтов:
serif - с засечками
sans-serif - без засечек
cursive - рукописные
monospace - моноширинные
fantasy - декоративные 
body {
	font-family: Arial, Helvetica, Calibri, sans-serif;
}
-
Нестандартные шрифты - всегда можно подключить на страницу с помощью at-правила @font-face
@font-face{
	font-family: myCustomFont;
	src: url(myCustomFont.woff);
}
body {
	font-family: myCustomFont, sans-serif;
}
Если есть на локальной машине (ПК пользователя)
@font-face{
	font-family: myCustomFont;
	src: local('Nativ Custom Font')
	     url(myCustomFont.woff);
}
Можно указать диапазон используемых в шрифте символов unicode-range:
@font-face{
	font-family: myCustomFont;
	unicode-range: U+000-5FF; /*только латинские символы*/
	src: local('Nativ Custom Font')
	     url(myCustomFont.woff);
}
Проблемы: 
1) Шрифты жирного и курсивного начертания нужно подключать отдельно
Но есть решение: мы можем привязать определенный файл к определенному начертанию с помощью свойства font-weight и font-style указанных в @font-face
@font-face{
	font-family: Sooo Good Font;
	src: url(soooGoodFont.woff);
	font-style: normal; /*обычный*/
}
@font-face{
	font-family: Sooo Good Font;
	src: url(soooGoodFontItalic.woff);
	font-style: italic; /*курсивный*/
}

body {font-family: Sooo Good Font;}
footer {font-style: italic;}
-
2) Раньше, что бы подключить шрифты на страницу, приходилось использовать аж 4 формата: .svg, .ttf, .woff и .eot.
сейчас все куда лучше, но Android 4.3 - не понимают формат .woff, и для них еще нужно подключить .ttf:
Генерация форматов шрифтов. Существуют сервисы-генераторы, которые помогают собрать весь необходимый пакет нужных форматов в несколько кликов. Самый популярный - FontSquirell.
А еще существуют сервисы, которые предоставляют шрифты. Самый популярный - Google Fonts
-
3) Шрифты - файлы, а файлы нужно загружать. Более того, когда шрифт загружен на страницу, он не применяется сразу.
FOIT - Flash of invisible text.


Свойство font
font: variant (необязат) style (необязат) weight (необязат) size (обязат) / line-height (необязат) family (обязат)
body {
font: small-caps italic 700 14px/ 20px Arial, sans-serif;
}


Текст - зафиксированная на каком-либо материальном носителе человеческая мысль; в общем плане связная и полная последовательность символов.
-
Выравнивание - свойство text-align
.uno {text-align: left;}
left; по левому краю
start; по краю начала текста (зависит от куда ничаниется текст (слева направо или с право на лево))
right; по правому краю
end; по краю, противоположному краю наачала текста (зависит от куда ничаниется текст (слева направо или с право на лево))
center; по центру
justify; по всей ширине (необходимо более одной строки текста)
-
"Украшение" текста - свойство "text-decoration"
{text-decoration: overline;}
overline; надчеркивание текста
line-through; зачеркивание текста
underline; подчеркивание текста
Не наследуется дочерними элементами, и им нельзя отменить "украшение", которое применено к родителю.
-
Тронсформация текста - свойство "text-transform" позволяет менять регистр букв с помощью трех значение:
capitalize; каждое слово пишеться с большой буквы
lowercase; все слова маленькими буквами
uppercase; все слова большими буквами
-
Абзацный отступ - для задания величины отступа используется свойство "text-indent". Допустимо использовать любые единицы измерения длины и их отрицательные значения.
.zwei {text-indent: 5%}
5%;
-lem;
-
Цвет текста задается с помощью свойства "color". 
Принято использовать hex для сплошных цветов и rgba() для полупрозрачных.
h1{
  color: #f00; /*красный цвет*/
}
-
Нюанс №1
color устанавливает так называемый "цвет переднего плана" (в противовес background-color - цвет фона), поэтому он имеет влияние на многие свойства.
p {
  color: #ofo; /* зеленный цвет текста */
  border: 2px solid; /* рамка будет зеленой */
  box-shadow: 0 0 50px; /* и тень элемента */
  text-shadow: 4px 4px 10px; /* и тень текста */
}
-
Нюанс №2
Свойства, которые не наследуют цвет от color автоматически, могут сделать это при помощи ключевого слова correntColor.
h1{
  color: #f0f;
  background-color: currentColor; /* цвет фона тоже станет #f0f */
}
-
Тень текста - свойство "text-shadow"
{
text-shadow: offset-x offset-y blur-radius color;
}
offset-x (обязательный) сдвиг по X
offset-y (обязательный) сдвиг по Y
blur-radius (не обязательный) радиус размытия (по умолчанию = 0)
color (не обязательный) цвет (по умолчанию возьмется цвет родителя)
Можно указывать несколько теней:
h1{
  text-shadow: 4px 4px 10px #f00
	      -4px -4px 10px #0f0;
}


Многоколоночность
Можем указать нужное количество колонок с помощью column-count
div {
	column-count:2;
	column-gap: 300px;
	column-rule: 2px solid #0f0
}
*
Меняем расстояние между колонками, используя column-gap
*
С помощью column-rule можно добавить разделитель между колонками, задав ширину, тип и размер
*
С помощью column-width можно указать ширину колонок
div {
	column-width: 200px;
	column-rule: 2px solid #0f0
}
*
Добавить сноску на всю ширину статьи можно с помощью column-span со значением all.


Переполнение текста
Переполнение контента следует скрыть с помощью overflow: hidden (результат не очень, обрезаеться часть текста)
text-overflow - более изяшное решение и содержит два значения clip (по умолчанию) и ellipsis. Нам нужно значение ellipsis. (текст обрезан, но обрезанная часть заменена на три точки).


Перенос текста.
Перенос внутри слов:
1. Указываем lang для параграфа
2. Устанавливаем автопереносы с помощью свойства hyphens c атрибутом auto.
!!!Но не все браузеры поддерживают данный функционал!!!
*
Что бы решить данную задачу есть мягкие переносы:
Указываются с помощью &shy; и работают при hyphens: manual (значение по умолчанию)
Необходимо указать мнемоник &shy; после каждого предлога, но есть сервисы которые это делают.
*
Перенос без дефиса
Устанавливаются с помощью <wbr>, можно заменить данным тегом мнемоники из вышеуказанного примера, и результат будет тем же, только перенос слов будет осуществлен без дефиса.
*
Разрыв слов:
Мы можем заставить текст всегда "разрываться" в любом месте. Для этого используйте свойство word-break со значением break-all.
Есть еще значение keep-all, но работает оно только для китайского, корейского и японского языков.
*
Запрет переноса:
Существуют ситуации, когда слово или словосочетание не нужно разрывать ни при каких обстоятельствах. Нужное слово заключаем в тег <mark></mark> и в css указываем:
mark {
	white-space: nowrap
}
white-space:pre - сохраняет форматирование текста как в файле.


Псевдоэлементы первой строки
Оформить первую строку можно с помощью ::first-line
Оформить первую букву в строку можно с помощью ::first-letter
