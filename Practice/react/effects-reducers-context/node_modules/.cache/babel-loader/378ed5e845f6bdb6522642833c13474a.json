{"ast":null,"code":"var _jsxFileName = \"D:\\\\wiki\\\\Practice\\\\react\\\\effects-reducers-context\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport styles from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport AuthContext from \"../../context/Auth-context\";\nimport Input from \"../UI/Input/Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (prevState, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.value,\n      isValid: action.value.includes(\"@\")\n    };\n  }\n\n  ;\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: prevState.value,\n      isValid: prevState.value.includes(\"@\")\n    };\n  }\n\n  ;\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\n\nconst passwordReducer = (prevState, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.value,\n      isValid: action.value.trim().length > 7\n    };\n  }\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: prevState.value,\n      isValid: prevState.value.trim().length > 7\n    };\n  }\n\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\n\nconst Login = () => {\n  _s();\n\n  const ctx = useContext(AuthContext); // const [inputEmail, setInputEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [inputPassword, setInputPassword] = useState(\"\");\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [emailState, dispatchEmailState] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: undefined\n  });\n  const [passwordState, dispatchPasswordState] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: undefined\n  });\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState;\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 1000);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [emailIsValid, passwordIsValid]);\n\n  const emailChangeHandler = event => {\n    dispatchEmailState({\n      type: \"USER_INPUT\",\n      value: event.target.value\n    }); // setFormIsValid(\n    //     event.target.value.includes(\"@\") && passwordState.isValid\n    //   );\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPasswordState({\n      type: \"USER_INPUT\",\n      value: event.target.value\n    }); // setFormIsValid(\n    //   event.target.value.trim().length > 7 && emailState.isValid\n    //   );\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmailState({\n      type: \"INPUT_BLUR\"\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPasswordState({\n      type: \"INPUT_BLUR\"\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    ctx.onLogin(emailState.value, passwordState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: styles.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        inputClassName: `${styles.control} ${emailState.isValid === false ? styles.invalid : \"\"}`,\n        labelFor: \"email\",\n        labelText: \"Email\",\n        inputType: \"email\",\n        inputId: \"email\",\n        inputValue: emailState.value,\n        inputOnChange: emailChangeHandler,\n        inputOnBlur: validateEmailHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        inputClassName: `${styles.control} ${passwordState.isValid === false ? styles.invalid : \"\"}`,\n        labelFor: \"password\",\n        labelText: \"Пароль\",\n        inputType: \"password\",\n        inputId: \"password\",\n        inputValue: passwordState.value,\n        inputOnChange: passwordChangeHandler,\n        inputOnBlur: validatePasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: styles.btn,\n          disabled: !formIsValid,\n          children: \"\\u0412\\u0445\\u043E\\u0434\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"Q3slzRAHJAiqYIeSwUQc2KLaQRo=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["D:/wiki/Practice/react/effects-reducers-context/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","useContext","Card","styles","Button","AuthContext","Input","emailReducer","prevState","action","type","value","isValid","includes","passwordReducer","trim","length","Login","ctx","formIsValid","setFormIsValid","emailState","dispatchEmailState","undefined","passwordState","dispatchPasswordState","emailIsValid","passwordIsValid","timer","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, useContext } from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport styles from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport AuthContext from \"../../context/Auth-context\";\nimport Input from \"../UI/Input/Input\";\n\nconst emailReducer = (prevState, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.value,\n      isValid: action.value.includes(\"@\"),\n    };\n  };\n    if (action.type === \"INPUT_BLUR\") {\n      return {\n        value: prevState.value,\n        isValid: prevState.value.includes(\"@\"),\n      }\n    };\n  return {\n    value: \"\",\n    isValid: false,\n  }\n};\n\nconst passwordReducer = (prevState, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.value,\n      isValid: action.value.trim().length > 7,\n    };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: prevState.value,\n      isValid: prevState.value.trim().length > 7,\n    };\n  }\n  return {\n    value: \"\",\n    isValid: false,\n  }\n}\n\nconst Login = () => {\n  const ctx = useContext(AuthContext);\n  // const [inputEmail, setInputEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [inputPassword, setInputPassword] = useState(\"\");\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const [emailState, dispatchEmailState] = useReducer(emailReducer, {value: \"\", isValid: undefined,});\n  const [passwordState, dispatchPasswordState] = useReducer(passwordReducer, {value: \"\", isValid: undefined,});\n\n  const { isValid: emailIsValid } = emailState;\n  const { isValid: passwordIsValid } = passwordState;\n  \n\n  useEffect(() => {\n    const timer = setTimeout (() => {\n      setFormIsValid(\n        emailIsValid && passwordIsValid\n      );\n    }, 1000);\n\n    return () => {\n      clearTimeout(timer)\n    };\n  }, [emailIsValid, passwordIsValid]);\n\n  const emailChangeHandler = (event) => {\n    dispatchEmailState({type: \"USER_INPUT\", value: event.target.value});\n\n    // setFormIsValid(\n    //     event.target.value.includes(\"@\") && passwordState.isValid\n    //   );\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPasswordState({type: \"USER_INPUT\", value: event.target.value})\n\n    // setFormIsValid(\n    //   event.target.value.trim().length > 7 && emailState.isValid\n    //   );\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmailState({type: \"INPUT_BLUR\"});\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPasswordState({type: \"INPUT_BLUR\"});\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    ctx.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={styles.login}>\n      <form onSubmit={submitHandler}>\n        <Input \n          inputClassName = {`${styles.control} ${\n              emailState.isValid === false ? styles.invalid : \"\"\n            }`}\n          labelFor = {\"email\"}\n          labelText = {\"Email\"}\n          inputType = {\"email\"}\n          inputId = {\"email\"}\n          inputValue ={emailState.value}\n          inputOnChange={emailChangeHandler}\n          inputOnBlur={validateEmailHandler}\n           />\n        {/* \n          <div\n            className={`${styles.control} ${\n              emailState.isValid === false ? styles.invalid : \"\"\n            }`}\n          >\n          <label htmlFor=\"email\">Email</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={emailState.value}\n              onChange={emailChangeHandler}\n              onBlur={validateEmailHandler}\n          />\n          </div>\n        */}\n        \n        <Input \n          inputClassName = {`${styles.control} ${\n            passwordState.isValid === false ? styles.invalid : \"\"\n          }`}\n          labelFor = {\"password\"}\n          labelText = {\"Пароль\"}\n          inputType = {\"password\"}\n          inputId = {\"password\"}\n          inputValue ={passwordState.value}\n          inputOnChange={passwordChangeHandler}\n          inputOnBlur={validatePasswordHandler}\n           />\n        {/*\n          <div\n            className={`${styles.control} ${\n              passwordState.isValid === false ? styles.invalid : \"\"\n            }`}\n          >\n          <label htmlFor=\"password\">Пароль</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n          </div>\n        */}\n        <div className={styles.actions}>\n          <Button type=\"submit\" className={styles.btn} disabled={!formIsValid}>\n            Вход\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}